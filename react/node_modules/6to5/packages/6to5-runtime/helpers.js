"use strict";

var _interopRequire = function (obj) {
  return obj && (obj["default"] || obj);
};

var _core = _interopRequire(require("core-js/library"));

exports.inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) subClass.__proto__ = superClass;
};

exports.defaults = function (obj, defaults) {
  for (var key in defaults) {
    if (obj[key] === undefined) {
      obj[key] = defaults[key];
    }
  }

  return obj;
};

exports.prototypeProperties = function (child, staticProps, instanceProps) {
  if (staticProps) Object.defineProperties(child, staticProps);
  if (instanceProps) Object.defineProperties(child.prototype, instanceProps);
};

exports.applyConstructor = function (Constructor, args) {
  var instance = Object.create(Constructor.prototype);

  var result = Constructor.apply(instance, args);

  return result != null && (typeof result == "object" || typeof result == "function") ? result : instance;
};

exports.taggedTemplateLiteral = function (strings, raw) {
  return _core.Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: _core.Object.freeze(raw)
    }
  }));
};

exports.taggedTemplateLiteralLoose = function (strings, raw) {
  strings.raw = raw;
  return strings;
};

exports.interopRequire = function (obj) {
  return obj && (obj["default"] || obj);
};

exports.toArray = function (arr) {
  return Array.isArray(arr) ? arr : _core.Array.from(arr);
};

exports.slicedToArray = function (arr, i) {
  if (Array.isArray(arr)) {
    return arr;
  } else {
    var _arr = [];

    for (var _iterator = _core.$for.getIterator(arr), _step; !(_step = _iterator.next()).done;) {
      _arr.push(_step.value);

      if (i && _arr.length === i) break;
    }

    return _arr;
  }
};

exports.objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

exports.hasOwn = Object.prototype.hasOwnProperty;
exports.slice = Array.prototype.slice;
exports.bind = Function.prototype.bind;
exports.defineProperty = function (obj, key, value) {
  return Object.defineProperty(obj, key, {
    value: value,
    enumerable: true,
    configurable: true,
    writable: true
  });
};

exports.asyncToGenerator = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);

    return new _core.Promise(function (resolve, reject) {
      var step = function (getNext) {
        var next;
        try {
          next = getNext();
        } catch (e) {
          reject(e);

          return;
        }
        if (next.done) {
          resolve(next.value);

          return;
        }
        _core.Promise.resolve(next.value).then(function (v) {
          step(function () {
            return gen.next(v);
          });
        }, function (e) {
          step(function () {
            return gen["throw"](e);
          });
        });
      };

      step(function () {
        return gen.next();
      });
    });
  };
};

exports.interopRequireWildcard = function (obj) {
  return obj && obj.constructor === Object ? obj : {
    "default": obj
  };
};

exports._typeof = function (obj) {
  return obj && obj.constructor === _core.Symbol ? "symbol" : typeof obj;
};

exports._extends = function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      target[key] = source[key];
    }
  }

  return target;
};

exports.get = function get(object, property, receiver) {
  var desc = _core.Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = _core.Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc && desc.writable) {
    return desc.value;
  } else {
    var getter = desc.get;
    if (getter === undefined) {
      return undefined;
    }
    return getter.call(receiver);
  }
};