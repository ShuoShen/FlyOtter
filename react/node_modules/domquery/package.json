{
  "name": "domquery",
  "version": "1.2.0",
  "description": "jQuery-like Handy DOM Manipulation Library",
  "main": "index.js",
  "scripts": {
    "test": "node test -b"
  },
  "repository": {
    "url": "git@github.com:npm-dom/domquery.git",
    "type": "git"
  },
  "keywords": [
    "dom",
    "browser",
    "npm-dom",
    "jquery"
  ],
  "author": {
    "name": "Azer Ko√ßulu",
    "email": "azer@kodfabrik.com"
  },
  "license": "BSD",
  "dependencies": {
    "new-chain": "0.0.x",
    "format-text": "0.0.x",
    "dom-event": "0.0.x",
    "key-event": "0.0.x",
    "trim": "0.0.1",
    "dom-classes": "0.0.x",
    "dom-tree": "0.0.x",
    "new-element": "0.0.x",
    "dom-select": "0.0.x",
    "dom-style": "0.0.x",
    "dom-value": "0.0.0",
    "component-delegate": "0.2.2",
    "discore-closest": "^0.1.3",
    "siblings": "^1.0.1"
  },
  "devDependencies": {
    "prova": "*",
    "random-color": "*"
  },
  "readme": "## DomQuery\n\njQuery-like handy DOM manipulation library composed from all small modules in NPM.\n\nExample:\n\n```js\nvar dom = require('domquery')\n\ndom('ul.songs:last-child')\n  .add('<li><a href=\"/play/{id}\">Play: {title}</a></li>', { id: 123, title: \"foo\" })\n  .show()\n```\n\n## Install\n\n```bash\n$ npm install domquery\n```\n\n## Usage\n\n### Selecting\n\n```js\nvar dom = require('domquery')\ndom('body .foo .bar')\n// => [array, of, elements]\n```\n\nDetails: [dom-select](https://github.com/npm-dom/dom-select)\n\n### Changing Style\n\n```js\nvar dom = require('domquery')\n\ndom('body .foo .bar')\n  .style('background-color', 'red')\n  // OR\n  .style({\n    'padding': '10px',\n    'margin': '10px'\n  })\n```\n\nOther available Methods:\n* show\n* hide\n\nDetails: [dom-style](https://github.com/npm-dom/dom-style)\n\n### Adding and Removing Elements\n\ndomquery embeds [dom-tree](http://github.com/npm-dom) to provide following methods;\n\n#### `.insert(parent element)`\n\nInsert an element to a parent element.\n\n```js\nvar dom = require('domquery')\n\ndom('<h1>{title}</h1><div>{content}', { title: 'Hello!', content: 'world' })\n  .insert('body')\n```\n\n#### `.add(child)`\n\nAdd a new element to specified parent element.\n\n```js\ndom('body > ul')\n  .add('<li>Hello</li>')\n```\n\nOr;\n\n```js\nvar row = dom('<li>{0}: {1}</li>', 123, 'Hello World')\ndom('body > ul').add(row)\n```\n\n* `child` can be an element, array, selector or HTML.\n\n#### `.addBefore(child, reference)`\n\nAdds `child` before `reference`\n\n```js\ndom('ul.songs')\n  .addBefore('<li>third song</li>', 'ul.songs li:nth-child(3)')\n```\n\n* `child` can be an element, array, selector or HTML.\n* `reference` can be an element, array or selector.\n\n#### `.addAfter(child, reference)`\n\nAdds `child` after `reference`\n\n```js\ndom('ul.songs')\n  .addAfter('<li>third song</li>', 'ul.songs li:nth-child(2)')\n```\n\n* `child` can be an element, array, selector or HTML.\n* `reference` can be an element, array or selector.\n\n#### `.replace(target, replacement)`\n\nReplaces `target` with `replacement`\n\n```js\ndom('ul.songs')\n  .replace('li:first-child', document.createElement('textarea'))\n```\n\nor:\n\n```js\ndom('ul.songs')\n  .replace('li:first-child', '<li>{0}: {name}</li>', 123, 'new song')\n```\n\n#### `.remove(element)`\n\n```js\ndom('ul .songs').remove('li:first-child')\n```\n\n### Inline CSS\n\nMethods: addClass, hasClass, removeClass, toggleClass\n\nExample:\n```js\nvar dom = require('domquery')\n\ndom('body').addClass('foobar')\n\ndom('body').hasClass('foobar')\n// => true\n\ndom('body').removeClass('foobar')\n\ndom('body').hasClass('foobar')\n// => false\n\ndom('body').toggleClass('foobar')\n\ndom('body').hasClass('foobar')\n// => true\n```\n\nOther Available Methods:\n* addClass\n* hasClass\n* removeClass\n* toggleClass\n\nDetails: [dom-classes](https://github.com/npm-dom/dom-classes)\n\n### Events\n\ndomquery embeds [dom-event](http://github.com/npm-dom/dom-event), [key-event](http://github.com/npm-dom/key-event) and [delegate-dom](http://github.com/npm-dom/delegate-dom) modules to provide following methods;\n\n#### `.on(event, callback)`\n\nAdd a new event\n\n```js\nvar dom = require('domquery')\n\ndom('body').on('click', function (event) {\n  console.log('clicked body')\n})\n```\n\nShortcuts:\n\n```js\ndom('ul li').click(function (event) {\n  console.log('clicked a \"li\"')\n})\n```\n\n* change\n* click\n* keydown\n* keyup\n* keypress\n* mousedown\n* mouseover\n* mouseup\n* resize\n\n##### `.off(event, callback)`\n\nRemove the event listener;\n\n```js\ndom('body').off('click', fn)\n```\n\n#### `.on(event, selector, callback)`\n\n[Delegate event](http://github.com/npm-dom/delegate-dom) handler function for `selector`:\n\n```js\ndom('body ul').on('click', 'li', function (event) {\n  console.log('clicked a list item!')\n})\n```\n\n#### `.onKey(event, callback)`\n\nAdds a [keyboard event](http://github.com/npm-dom/key-event):\n\n```js\ndom('input').onKey('alt a', function (event) {\n  console.log('user pressed alt + a')\n})\n```\n\n\n#### `.offKey(event, callback)`\n\nRemoves a [keyboard event](http://github.com/npm-dom/key-event):\n\n```js\ndom('input').onKey('alt a', altA)\ndom('input').offKey('alt a', altA)\n\nfunction altA (event) {\n  console.log('user pressed alt + a')\n}\n```\n\n### Attributes\n\n```js\nvar dom = require('domquery')\n\ndom('a.my-link').attr('href')\n// => http://foobar.com\n\ndom('a').attr('href', 'http://foobar.com')\n```\n\n### Content\n\nReading:\n\n```js\ndom('.foo').html() // equivalent of `innerHTML`\ndom('input.my-input').val() // equivalent of `value`\n```\n\nSetting:\n\n```js\ndom('.foo').html('<div>new content</div>')\ndom('input.my-input').val('new value')\n```\n\nMore info about it is at [dom-value](http://github.com/npm-dom/dom-value)\n\n![](https://dl.dropboxusercontent.com/s/ofqr0ha1all2nbl/npmel_30.jpg)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/npm-dom/domquery/issues"
  },
  "homepage": "https://github.com/npm-dom/domquery",
  "_id": "domquery@1.2.0",
  "dist": {
    "shasum": "bf57799498f27cb59b060c9209b00a79b8938353"
  },
  "_from": "domquery@",
  "_resolved": "https://registry.npmjs.org/domquery/-/domquery-1.2.0.tgz"
}
