{
  "name": "6to5-loader",
  "version": "2.0.0",
  "description": "6t05 module loader for webpack",
  "main": "index.js",
  "dependencies": {
    "loader-utils": "^0.2.5"
  },
  "peerDependencies": {
    "6to5": "^2.0.0",
    "webpack": "^1.4.5"
  },
  "devDependencies": {
    "mocha": "^2.0.1",
    "mocha-loader": "^0.7.0",
    "should": "^4.3.1",
    "webpack-dev-server": "^1.6.6"
  },
  "scripts": {
    "test": "webpack-dev-server --config=test/webpack.config.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Couto/6to5-loader.git"
  },
  "keywords": [
    "webpack",
    "loader",
    "6to5",
    "es6",
    "transpiler",
    "module"
  ],
  "author": {
    "name": "Luis Couto",
    "email": "couto@15minuteslate.net"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Couto/6to5-loader/issues"
  },
  "homepage": "https://github.com/Couto/6to5-loader",
  "readme": "# 6to5-loader\n\n> Turn ES6 code into vanilla ES5 with no runtime required using [6to5](https://github.com/sebmck/6to5);\n\n__Notes:__ Issues with the output should be reported on the 6to5 [issue tracker](https://github.com/sebmck/6to5/issues);\n\n## Install\n\n```\n$ npm install --save-dev 6to5-loader\n```\n\n## Usage\n\n```\nimport Animal from '6to5!./Animal.js';\n\nclass Person extends Animal {\n  constructor(arg='default') {\n    this.eat = 'Happy Meal';\n  }\n}\n\nexport default Person;\n```\n\n```\nvar Person = require('6to5!./Person.js').default;\nnew Person();\n```\n\nOr within the webpack config:\n\n```\nmodule: {\n    loaders: [\n        { test: /\\.js$/, exclude: /node_modules/, loader: '6to5-loader'}\n    ]\n}\n```\n\nand then import normally:\n\n```\nimport Person from './Person.js';\n```\n\n## Troubleshooting\n\n#### 6to5-loader is slow!\n\nMake sure you are transforming as few files as possible. Because you are probably \nmatching `/\\.js$/`, you might be transforming the `node_modules` folder or other unwanted\nsource. See the `exclude` option in the `loaders` config as documented above.\n\n#### 6to5 is injecting a runtime into each file and bloating my code!\n\n6to5 uses a very small runtime for common functions such as `_extend`. By default\nthis will be added to every file that requires it.\n\nYou can instead require the 6to5 runtime as a separate module to avoid the duplication.\n\nThe following configuration disables automatic per-file runtime injection in 6to5, instead\nbundling a single runtime and providing it to each transformed file.\n\n```javascript\nloaders: [\n  // runtime=true tells 6to5 to expect a runtime, but we still need to bundle it.\n  {test: /\\.jsx?$/, exclude: /node_modules/, loader: '6to5-loader?experimental=true&runtime=true'}\n],\nplugins: [\n  // to5Runtime wants to export to the window. This loader grabs the export\n  // and instead provides it to the modules that need it.\n  // \n  // The 'imports?global=>{}!' is optional, but prevents to5Runtime from leaking\n  // to the window object.\n  // \n  // Alternatively, write `require('6to5/runtime')` at the top of your entry point.\n  // Leaks the object to the window, but it's simple.\n  new webpack.ProvidePlugin({\n    to5Runtime: \"imports?global=>{}!exports-loader?global.to5Runtime!6to5/runtime\"\n  })\n]\n```\n\nThis can save significant overhead if you use 6to5 in many modules.\n\n## Options\n\nSee the `6to5` [options](https://6to5.github.io/usage.html#options)\n\n## License\n\nMIT Â© Luis Couto\n",
  "readmeFilename": "README.md",
  "_id": "6to5-loader@2.0.0",
  "dist": {
    "shasum": "7e849da5ab1320bf29d8fa37a3d8b181a8c7c093"
  },
  "_from": "6to5-loader@",
  "_resolved": "https://registry.npmjs.org/6to5-loader/-/6to5-loader-2.0.0.tgz"
}
