{
  "name": "core-js",
  "description": "Standard library",
  "version": "0.4.5",
  "repository": {
    "type": "git",
    "url": "https://github.com/zloirock/core-js.git"
  },
  "main": "index.js",
  "devDependencies": {
    "LiveScript": "1.3.x",
    "grunt": "0.4.x",
    "load-grunt-tasks": "0.4.x",
    "grunt-livescript": "0.5.x",
    "grunt-contrib-uglify": "0.4.x",
    "grunt-contrib-watch": "0.6.x",
    "karma": "*",
    "karma-qunit": "*",
    "karma-chrome-launcher": "*",
    "karma-ie-launcher": "*",
    "karma-firefox-launcher": "*",
    "karma-opera-launcher": "*",
    "promises-aplus-tests": "*"
  },
  "scripts": {
    "promises-tests": "promises-aplus-tests tests/promises_tests_adapter"
  },
  "keywords": [
    "ES6",
    "ECMAScript 6",
    "ES7",
    "ECMAScript 7",
    "Map",
    "Set",
    "WeakMap",
    "WeakSet",
    "Dict",
    "Promise",
    "Symbol",
    "Array generics",
    "setImmediate",
    "console cap",
    "abstract references",
    "partial application",
    "Date formatting"
  ],
  "readme": "# Core.js\r\nAlternative modular compact (max. ~23kb w/o gzip) standard library for JavaScript. Includes polyfills for [ECMAScript 5](#ecmascript-5), [ECMAScript 6](#ecmascript-6): [symbols](#ecmascript-6-symbols), [collections](#ecmascript-6-collections), [iterators](#ecmascript-6-iterators), [promises](#ecmascript-6-promises); [setImmediate](#setimmediate), [array generics](#mozilla-javascript-array-generics), [console cap](#console). Some additional functionality such as [dictionaries](#dict), [extended partial application](#partial-application), [date formatting](#date-formatting).\r\n\r\n[Example](http://goo.gl/mfHYm2):\r\n```javascript\r\nconsole.log(Array.from(new Set([1, 2, 3, 2, 1]))); // => [1, 2, 3]\r\nconsole.log('*'.repeat(10));                       // => '**********'\r\nPromise.resolve(32).then(console.log);             // => 32\r\nsetImmediate(console.log, 42);                     // => 42\r\n```\r\n\r\n[Without extension of native objects](http://goo.gl/WBhs43):\r\n```javascript\r\nvar log  = core.console.log;\r\nlog(core.Array.from(new core.Set([1, 2, 3, 2, 1]))); // => [1, 2, 3]\r\nlog(core.String.repeat('*', 10));                    // => '**********'\r\ncore.Promise.resolve(32).then(log);                  // => 32\r\ncore.setImmediate(log, 42);                          // => 42\r\n```\r\n- [API](#api)\r\n  - [ECMAScript 5](#ecmascript-5)\r\n  - [ECMAScript 6](#ecmascript-6)\r\n  - [ECMAScript 6: Symbols](#ecmascript-6-symbols)\r\n  - [ECMAScript 6: Collections](#ecmascript-6-collections)\r\n  - [ECMAScript 6: Iterators](#ecmascript-6-iterators)\r\n  - [ECMAScript 6: Promises](#ecmascript-6-promises)\r\n  - [ECMAScript 6: Reflect](#ecmascript-6-reflect)\r\n  - [ECMAScript 7](#ecmascript-7)\r\n  - [ECMAScript 7: Abstract References](#ecmascript-7-abstract-references)\r\n  - [Mozilla JavaScript: Array generics](#mozilla-javascript-array-generics)\r\n  - [setTimeout / setInterval](#settimeout--setinterval)\r\n  - [setImmediate](#setimmediate)\r\n  - [console](#console)\r\n  - [Object](#object)\r\n  - [Dict](#dict)\r\n  - [Partial application](#partial-application)\r\n  - [Date formatting](#date-formatting)\r\n  - [Array](#array)\r\n  - [Number](#number)\r\n  - [Escaping characters](#escaping-characters)\r\n- [Install](#install)\r\n- [Changelog](#changelog)\r\n\r\n## API:\r\n### ECMAScript 5\r\nModule `es5`, nothing new - without examples.\r\n```javascript\r\nObject\r\n  .create(proto | null, descriptors?) -> object\r\n  .getPrototypeOf(object) -> proto | null\r\n  .defineProperty(target, key, desc) -> target, cap for ie8-\r\n  .defineProperties(target, descriptors) -> target, cap for ie8-\r\n  .getOwnPropertyDescriptor(object, key) -> desc\r\n  .getOwnPropertyNames(object) -> array\r\n  .seal(object) -> object, cap for ie8-\r\n  .freeze(object) -> object, cap for ie8-\r\n  .preventExtensions(object) -> object, cap for ie8-\r\n  .isSealed(object) -> bool, cap for ie8-\r\n  .isFrozen(object) -> bool, cap for ie8-\r\n  .isExtensible(object) -> bool, cap for ie8-\r\n  .keys(object) -> array\r\nArray\r\n  .isArray(var) -> bool\r\n  #slice(start?, end?) -> array, fix for ie7-\r\n  #join(string = ',') -> string, fix for ie7-\r\n  #indexOf(var, from?) -> int\r\n  #lastIndexOf(var, from?) -> int\r\n  #every(fn(val, index, @), that) -> bool\r\n  #some(fn(val, index, @), that) -> bool\r\n  #forEach(fn(val, index, @), that) -> void\r\n  #map(fn(val, index, @), that) -> array\r\n  #filter(fn(val, index, @), that) -> array\r\n  #reduce(fn(memo, val, index, @), memo?) -> var\r\n  #reduceRight(fn(memo, val, index, @), memo?) -> var\r\nFunction\r\n  #bind(object, ...args) -> boundFn(...args)\r\nString\r\n  #trim() -> str\r\nDate\r\n  .now() -> int\r\n```\r\n\r\n### ECMAScript 6\r\nModule `es6`. About iterators from this module [here](#ecmascript-6-iterators). [Symbols](#ecmascript-6-symbols), [collections](#ecmascript-6-collections) and [promises](#ecmascript-6-promises) in separate modules.\r\n#### ECMAScript 6: Object\r\n```javascript\r\nObject\r\n  .assign(target, ...src) -> target\r\n  .is(a, b) -> bool\r\n  .setPrototypeOf(target, proto | null) -> target, sham(ie11+)\r\n  #toString() -> string, fix for @@toStringTag support\r\nFunction\r\n  #name -> string (IE9+)\r\n```\r\n[Example](http://goo.gl/UN5ZDT):\r\n```javascript\r\nvar foo = {q: 1, w: 2}\r\n  , bar = {e: 3, r: 4}\r\n  , baz = {t: 5, y: 6};\r\nObject.assign(foo, bar, baz); // => foo = {q: 1, w: 2, e: 3, r: 4, t: 5, y: 6}\r\n\r\nObject.is(NaN, NaN); // => true\r\nObject.is(0, -0);    // => false\r\nObject.is(42, 42);   // => true\r\nObject.is(42, '42'); // => false\r\n\r\nfunction Parent(){}\r\nfunction Child(){}\r\nObject.setPrototypeOf(Child.prototype, Parent.prototype);\r\nnew Child instanceof Child;  // => true\r\nnew Child instanceof Parent; // => true\r\n\r\nvar O = {};\r\nO[Symbol.toStringTag] = 'Foo';\r\n'' + O; // => '[object Foo]'\r\n\r\n(function foo(){}).name // => 'foo'\r\n```\r\n#### ECMAScript 6: Array\r\n```javascript\r\nArray\r\n  .from(iterable | array-like, mapFn(val, index)?, that) -> array\r\n  .of(...args) -> array\r\n  #copyWithin(target = 0, start = 0, end = @length) -> @\r\n  #fill(var, start = 0, end = @length) -> @\r\n  #find(fn(val, index, @), that) -> var\r\n  #findIndex(fn(val, index, @), that) -> int\r\n  #@@unscopables -> object\r\n```\r\n[Example](http://goo.gl/nxmJTe):\r\n```javascript\r\nArray.from(new Set([1, 2, 3, 2, 1]));      // => [1, 2, 3]\r\nArray.from({0: 1, 1: 2, 2: 3, length: 3}); // => [1, 2, 3]\r\nArray.from('123', Number);                 // => [1, 2, 3]\r\nArray.from('123', function(it){\r\n  return it * it;\r\n});                                        // => [1, 4, 9]\r\n\r\nArray.of(1);       // => [1]\r\nArray.of(1, 2, 3); // => [1, 2, 3]\r\n\r\nfunction isOdd(val){\r\n  return val % 2;\r\n}\r\n[4, 8, 15, 16, 23, 42].find(isOdd);      // => 15\r\n[4, 8, 15, 16, 23, 42].findIndex(isOdd); // => 2\r\n[4, 8, 15, 16, 23, 42].find(isNaN);      // => undefined\r\n[4, 8, 15, 16, 23, 42].findIndex(isNaN); // => -1\r\n\r\nArray(5).fill(42); // => [42, 42, 42, 42, 42]\r\n\r\n[1, 2, 3, 4, 5].copyWithin(0, 3); // => [4, 5, 3, 4, 5]\r\n```\r\n#### ECMAScript 6: String & RegExp\r\n```javascript\r\nString\r\n  .fromCodePoint(...codePoints) -> str\r\n  .raw({raw}, ...substitutions) -> str\r\n  #includes(str, from?) -> bool\r\n  #startsWith(str, from?) -> bool\r\n  #endsWith(str, from?) -> bool\r\n  #repeat(num) -> str\r\n  #codePointAt(pos) -> uint\r\nRegExp\r\n  #flags -> str (getter, IE9+)\r\n```\r\n[Example](http://goo.gl/gbP8Io):\r\n```javascript\r\n'foobarbaz'.includes('bar');      // => true\r\n'foobarbaz'.includes('bar', 4);   // => false\r\n'foobarbaz'.startsWith('foo');    // => true\r\n'foobarbaz'.startsWith('bar', 3); // => true\r\n'foobarbaz'.endsWith('baz');      // => true\r\n'foobarbaz'.endsWith('bar', 6);   // => true\r\n\r\n'string'.repeat(3); // => 'stringstringstring'\r\n\r\n'𠮷'.codePointAt(0); // => 134071\r\nString.fromCodePoint(97, 134071, 98); // => 'a𠮷b'\r\n\r\nvar name = 'Bob';\r\nString.raw`Hi\\n${name}!`;           // => 'Hi\\\\nBob!'\r\nString.raw({raw: 'test'}, 0, 1, 2); // => 't0e1s2t'\r\n\r\n/foo/.flags;    // => ''\r\n/foo/gim.flags; // => 'gim'\r\n```\r\n#### ECMAScript 6: Number & Math\r\n```javascript\r\nNumber\r\n  .EPSILON -> num\r\n  .isFinite(num) -> bool\r\n  .isInteger(num) -> bool\r\n  .isNaN(num) -> bool\r\n  .isSafeInteger(num) -> bool\r\n  .MAX_SAFE_INTEGER -> int\r\n  .MIN_SAFE_INTEGER -> int\r\n  .parseFloat(str) -> num\r\n  .parseInt(str) -> int\r\nMath\r\n  .acosh(num) -> num\r\n  .asinh(num) -> num\r\n  .atanh(num) -> num\r\n  .cbrt(num) -> num\r\n  .clz32(num) -> uint\r\n  .cosh(num) -> num\r\n  .expm1(num) -> num\r\n  .fround(num) -> num (IE10+)\r\n  .hypot(...args) -> num\r\n  .imul(num, num) -> int\r\n  .log1p(num) -> num\r\n  .log10(num) -> num\r\n  .log2(num) -> num\r\n  .sign(num) -> 1 | -1 | 0 | -0 | NaN\r\n  .sinh(num) -> num\r\n  .tanh(num) -> num\r\n  .trunc(num) -> num\r\n```\r\n\r\n### ECMAScript 6: Symbols\r\nModule `es6_symbol`.\r\n```javascript\r\nSymbol(description?) -> symbol\r\n  .hasInstance -> @@hasInstance\r\n  .isConcatSpreadable -> @@isConcatSpreadable\r\n  .iterator -> @@iterator\r\n  .match -> @@match\r\n  .replace -> @@replace\r\n  .search -> @@search\r\n  .species -> @@species\r\n  .split -> @@split\r\n  .toPrimitive -> @@toPrimitive\r\n  .toStringTag -> @@toStringTag\r\n  .unscopables -> @@unscopables\r\n  .for(key) -> symbol\r\n  .keyFor(symbol) -> key\r\n  .useSimple() -> void\r\n  .useSetter() -> void\r\n  .pure(description?) -> symbol || string\r\n  .set(object, key, val) -> object\r\n```\r\n[Basic example](http://goo.gl/BbvWFc):\r\n```javascript\r\nvar Person = (function(){\r\n  var NAME = Symbol('name');\r\n  function Person(name){\r\n    this[NAME] = name;\r\n  }\r\n  Person.prototype.getName = function(){\r\n    return this[NAME];\r\n  };\r\n  return Person;\r\n})();\r\n\r\nvar person = new Person('Vasya');\r\nconsole.log(person.getName());          // => 'Vasya'\r\nconsole.log(person['name']);            // => undefined\r\nconsole.log(person[Symbol('name')]);    // => undefined, symbols are uniq\r\nfor(var key in person)console.log(key); // => only 'getName', symbols are not enumerable\r\n```\r\n`Symbol.for` & `Symbol.keyFor` [example](http://goo.gl/0pdJjX):\r\n```javascript\r\nvar symbol = Symbol.for('key');\r\nsymbol === Symbol.for('key'); // true\r\nSymbol.keyFor(symbol);        // 'key'\r\n```\r\nBy default, `Symbol` polyfill define setter in `Object.prototype`. You can disable it. [Example](http://goo.gl/N5UD7J):\r\n```javascript\r\nSymbol.useSimple();\r\nvar s1 = Symbol('s1')\r\n  , o1 = {};\r\no1[s1] = true;\r\nfor(var key in o1)log(key); // => 'Symbol(s1)_t.qamkg9f3q', w/o native Symbol\r\n\r\nSymbol.useSetter();\r\nvar s2 = Symbol('s2')\r\n  , o2 = {};\r\no2[s2] = true;\r\nfor(var key in o2)log(key); // nothing\r\n```\r\n`Reflect.ownKeys` from [`Reflect`](#ecmascript-6-reflect) module returns all object keys - strings & symbols.\r\n### ECMAScript 6: Collections\r\nModule `es6_collections`. About iterators from this module [here](#ecmascript-6-iterators).\r\n\r\n#### Map\r\n```javascript\r\nnew Map(iterable (entries) ?) -> map\r\n  #clear() -> void\r\n  #delete(key) -> bool\r\n  #forEach(fn(val, key, @), that) -> void\r\n  #get(key) -> val\r\n  #has(key) -> bool\r\n  #set(key, val) -> @\r\n  #size\r\n```\r\n[Example](http://goo.gl/RDbROF):\r\n```javascript\r\nvar a = [1];\r\n\r\nvar map = new Map([['a', 1], [42, 2]]);\r\nmap.set(a, 3).set(true, 4);\r\n\r\nconsole.log(map.size);        // => 4\r\nconsole.log(map.has(a));      // => true\r\nconsole.log(map.has([1]));    // => false\r\nconsole.log(map.get(a));      // => 3\r\nmap.forEach(function(val, key){\r\n  console.log(val);           // => 1, 2, 3, 4\r\n  console.log(key);           // => 'a', 42, [1], true\r\n});\r\nmap.delete(a);\r\nconsole.log(map.size);        // => 3\r\nconsole.log(map.get(a));      // => undefined\r\nconsole.log(Array.from(map)); // => [['a', 1], [42, 2], [true, 4]]\r\n```\r\n#### Set\r\n```javascript\r\nnew Set(iterable?) -> set\r\n  #add(key) -> @\r\n  #clear() -> void\r\n  #delete(key) -> bool\r\n  #forEach(fn(el, el, @), that) -> void\r\n  #has(key) -> bool\r\n  #size\r\n```\r\n[Example](http://goo.gl/7XYya3):\r\n```javascript\r\nvar set = new Set(['a', 'b', 'a', 'c']);\r\nset.add('d').add('b').add('e');\r\nconsole.log(set.size);        // => 5\r\nconsole.log(set.has('b'));    // => true\r\nset.forEach(function(it){\r\n  console.log(it);            // => 'a', 'b', 'c', 'd', 'e'\r\n});\r\nset.delete('b');\r\nconsole.log(set.size);        // => 4\r\nconsole.log(set.has('b'));    // => false\r\nconsole.log(Array.from(set)); // => ['a', 'c', 'd', 'e']\r\n```\r\n#### WeakMap\r\n```javascript\r\nnew WeakMap(iterable (entries) ?) -> weakmap\r\n  #delete(key) -> bool\r\n  #get(key) -> val\r\n  #has(key) -> bool\r\n  #set(key, val) -> @\r\n```\r\n[Example](http://goo.gl/SILXyw):\r\n```javascript\r\nvar a = [1]\r\n  , b = [2]\r\n  , c = [3];\r\n\r\nvar wmap = new WeakMap([[a, 1], [b, 2]]);\r\nwmap.set(c, 3).set(b, 4);\r\nconsole.log(wmap.has(a));   // => true\r\nconsole.log(wmap.has([1])); // => false\r\nconsole.log(wmap.get(a));   // => 1\r\nwmap.delete(a);\r\nconsole.log(wmap.get(a));   // => undefined\r\n\r\n// Private properties store:\r\nvar Person = (function(){\r\n  var names = new WeakMap;\r\n  function Person(name){\r\n    names.set(this, name);\r\n  }\r\n  Person.prototype.getName = function(){\r\n    return names.get(this);\r\n  };\r\n  return Person;\r\n})();\r\n\r\nvar person = new Person('Vasya');\r\nconsole.log(person.getName());          // => 'Vasya'\r\nfor(var key in person)console.log(key); // => only 'getName'\r\n```\r\n#### WeakSet\r\n```javascript\r\nnew WeakSet(iterable?) -> weakset\r\n  #add(key) -> @\r\n  #delete(key) -> bool\r\n  #has(key) -> bool\r\n```\r\n[Example](http://goo.gl/TdFbEx):\r\n```javascript\r\nvar a = [1]\r\n  , b = [2]\r\n  , c = [3];\r\n\r\nvar wset = new WeakSet([a, b, a]);\r\nwset.add(c).add(b).add(c);\r\nconsole.log(wset.has(b));   // => true\r\nconsole.log(wset.has([2])); // => false\r\nwset.delete(b);\r\nconsole.log(wset.has(b));   // => false\r\n```\r\n\r\n### ECMAScript 6: Iterators\r\nModule `es6`:\r\n```javascript\r\nString\r\n  #@@iterator() -> iterator\r\nArray\r\n  #values() -> iterator\r\n  #keys() -> iterator\r\n  #entries() -> iterator (entries)\r\n  #@@iterator() -> iterator\r\nArguments\r\n  #@@iterator() -> iterator (sham, available only in core-js methods)\r\n```\r\nModule `es6_collections`:\r\n```javascript\r\nSet\r\n  #values() -> iterator\r\n  #keys() -> iterator\r\n  #entries() -> iterator (entries)\r\n  #@@iterator() -> iterator\r\nMap\r\n  #values() -> iterator\r\n  #keys() -> iterator\r\n  #entries() -> iterator (entries)\r\n  #@@iterator() -> iterator (entries)\r\n```\r\n[Example](http://goo.gl/3s27dC):\r\n```javascript\r\nvar string = 'a𠮷b';\r\n\r\nfor(var val of string)console.log(val);         // => 'a', '𠮷', 'b'\r\n\r\nvar array = ['a', 'b', 'c'];\r\n\r\nfor(var val of array)console.log(val);          // => 'a', 'b', 'c'\r\nfor(var val of array.values())console.log(val); // => 'a', 'b', 'c'\r\nfor(var key of array.keys())console.log(key);   // => 0, 1, 2\r\nfor(var [key, val] of array.entries()){\r\n  console.log(key);                             // => 0, 1, 2\r\n  console.log(val);                             // => 'a', 'b', 'c'\r\n}\r\n\r\nvar map = new Map([['a', 1], ['b', 2], ['c', 3]]);\r\n\r\nfor(var [key, val] of map){\r\n  console.log(key);                             // => 'a', 'b', 'c'\r\n  console.log(val);                             // => 1, 2, 3\r\n}\r\nfor(var val of map.values())console.log(val);   // => 1, 2, 3\r\nfor(var key of map.keys())console.log(key);     // => 'a', 'b', 'c'\r\nfor(var [key, val] of map.entries()){\r\n  console.log(key);                             // => 'a', 'b', 'c'\r\n  console.log(val);                             // => 1, 2, 3\r\n}\r\n\r\nvar set = new Set([1, 2, 3, 2, 1]);\r\n\r\nfor(var val of set)console.log(val);            // => 1, 2, 3\r\nfor(var val of set.values())console.log(val);   // => 1, 2, 3\r\nfor(var key of set.keys())console.log(key);     // => 1, 2, 3\r\nfor(var [key, val] of set.entries()){\r\n  console.log(key);                             // => 1, 2, 3\r\n  console.log(val);                             // => 1, 2, 3\r\n}\r\n```\r\nModule `$for` - iterators chaining - `for-of` and array / generator comprehensions helpers for ES5- syntax.\r\n```javascript\r\n$for(iterable, entries) -> iterator ($for)\r\n  #of(fn(value, key?), that) -> void\r\n  #array(mapFn(value, key?)?, that) -> array\r\n  #filter(fn(value, key?), that) -> iterator ($for)\r\n  #map(fn(value, key?), that) -> iterator ($for)\r\n  .isIterable(var) -> bool\r\n  .getIterator(iterable) -> iterator\r\n```\r\n[Examples](http://goo.gl/Jtz0oG):\r\n```javascript\r\n$for(new Set([1, 2, 3, 2, 1])).of(function(it){\r\n  console.log(it); // => 1, 2, 3\r\n});\r\n\r\n$for([1, 2, 3].entries(), true).of(function(key, value){\r\n  console.log(key);   // => 0, 1, 2\r\n  console.log(value); // => 1, 2, 3\r\n});\r\n\r\n$for('abc').of(console.log, console); // => 'a', 'b', 'c'\r\n\r\n$for([1, 2, 3, 4, 5]).of(function(it){\r\n  console.log(it); // => 1, 2, 3\r\n  if(it == 3)return false;\r\n});\r\n\r\nvar ar1 = $for([1, 2, 3]).array(function(v){\r\n  return v * v;\r\n}); // => [1, 4, 9]\r\n\r\nvar set = new Set([1, 2, 3, 2, 1]);\r\nvar ar1 = $for(set).filter(function(v){\r\n  return v % 2;\r\n}).array(function(v){\r\n  return v * v;\r\n}); // => [1, 9]\r\n\r\nvar iter = $for(set).filter(function(v){\r\n  return v % 2;\r\n}).map(function(v){\r\n  return v * v;\r\n});\r\niter.next(); // => {value: 1, done: false}\r\niter.next(); // => {value: 9, done: false}\r\niter.next(); // => {value: undefined, done: true}\r\n\r\nvar map1 = new Map([['a', 1], ['b', 2], ['c', 3]]);\r\nvar map2 = new Map($for(map1, true).filter(function(k, v){\r\n  return v % 2;\r\n}).map(function(k, v){\r\n  return [k + k, v * v];\r\n})); // => Map {aa: 1, cc: 9}\r\n```\r\n\r\n### ECMAScript 6: Promises\r\nModule `es6_promise`.\r\n```javascript\r\nnew Promise(executor(resolve(var), reject(var))) -> promise\r\n  #then(resolved(var), rejected(var)) -> promise\r\n  #catch(rejected(var)) -> promise\r\n  .resolve(var || promise) -> promise\r\n  .reject(var) -> promise\r\n  .all(iterable) -> promise\r\n  .race(iterable) -> promise\r\n```\r\nBasic [example](http://goo.gl/vGrtUC):\r\n```javascript\r\nvar log = console.log.bind(console);\r\nfunction sleepRandom(time){\r\n  return new Promise(function(resolve, reject){\r\n    setTimeout(resolve, time * 1e3, 0 | Math.random() * 1e3);\r\n  });\r\n}\r\n\r\nlog('Run');                    // => Run\r\nsleepRandom(5).then(function(result){\r\n  log(result);                 // => 869, after 5 sec.\r\n  return sleepRandom(10);\r\n}).then(function(result){\r\n  log(result);                 // => 202, after 10 sec.\r\n}).then(function(){\r\n  log('immediately after');    // => immediately after\r\n  throw Error('Irror!');\r\n}).then(function(){\r\n  log('will not be displayed');\r\n}).catch(log);                 // => => Error: Irror!\r\n```\r\n`Promise.resolve` and `Promise.reject` [example](http://goo.gl/vr8TN3):\r\n```javascript\r\nPromise.resolve(42).then(log); // => 42\r\nPromise.reject(42).catch(log); // => 42\r\n\r\nPromise.resolve($.getJSON('/data.json')); // => ES6 promise\r\n```\r\n`Promise.all` [example](http://goo.gl/RdoDBZ):\r\n```javascript\r\nPromise.all([\r\n  'foo',\r\n  sleepRandom(5),\r\n  sleepRandom(15),\r\n  sleepRandom(10)  // after 15 sec:\r\n]).then(log);      // => ['foo', 956, 85, 382]\r\n```\r\n`Promise.race` [example](http://goo.gl/L8ovkJ):\r\n```javascript\r\nfunction timeLimit(promise, time){\r\n  return Promise.race([promise, new Promise(function(resolve, reject){\r\n    setTimeout(reject, time * 1e3, Error('Await > ' + time + ' sec'));\r\n  })]);\r\n}\r\n\r\ntimeLimit(sleepRandom(5), 10).then(log);   // => 853, after 5 sec.\r\ntimeLimit(sleepRandom(15), 10).catch(log); // Error: Await > 10 sec\r\n```\r\nECMAScript 7 [async functions](https://github.com/lukehoban/ecmascript-asyncawait) [example](http://goo.gl/wnQS4j):\r\n```javascript\r\nvar delay = time => new Promise(resolve => setTimeout(resolve, time))\r\n\r\nasync function sleepRandom(time){\r\n  await delay(time * 1e3);\r\n  return 0 | Math.random() * 1e3;\r\n};\r\nasync function sleepError(time, msg){\r\n  await delay(time * 1e3);\r\n  throw Error(msg);\r\n};\r\n\r\n(async () => {\r\n  try {\r\n    log('Run');                // => Run\r\n    log(await sleepRandom(5)); // => 936, after 5 sec.\r\n    var [a, b, c] = await Promise.all([\r\n      sleepRandom(5),\r\n      sleepRandom(15),\r\n      sleepRandom(10)\r\n    ]);\r\n    log(a, b, c);              // => 210 445 71, after 15 sec.\r\n    await sleepError(5, 'Irror!');\r\n    log('Will not be displayed');\r\n  } catch(e){\r\n    log(e);                    // => Error: 'Irror!', after 5 sec.\r\n  }\r\n})();\r\n```\r\n### ECMAScript 6: Reflect\r\nModule `es6_reflect`.\r\n```javascript\r\nReflect\r\n  .apply(target, thisArgument, argumentsList) -> var\r\n  .construct(target, argumentsList) -> object\r\n  .defineProperty(target, propertyKey, attributes) -> bool\r\n  .deleteProperty(target, propertyKey) -> bool\r\n  .enumerate(target) -> iterator\r\n  .get(target, propertyKey, receiver?) -> var\r\n  .getOwnPropertyDescriptor(target, propertyKey) -> desc\r\n  .getPrototypeOf(target) -> object | null\r\n  .has(target, propertyKey) -> bool\r\n  .isExtensible(target) -> bool\r\n  .ownKeys(target) -> array\r\n  .preventExtensions(target) -> bool\r\n  .set(target, propertyKey, V, receiver?) -> bool\r\n  .setPrototypeOf(target, proto) -> bool, sham(ie11+)\r\n```\r\n[Example](http://goo.gl/gVT0cH):\r\n```javascript\r\nvar O = {a: 1};\r\nObject.defineProperty(O, 'b', {value: 2});\r\nO[Symbol('c')] = 3;\r\nconsole.log(Reflect.ownKeys(O)); // => ['a', 'b', Symbol(c)]\r\n\r\nfunction C(a, b){\r\n  this.c = a + b;\r\n}\r\n\r\nvar instance = Reflect.construct(C, [20, 22]);\r\nconsole.log(instance.c); // => 42\r\n```\r\n### ECMAScript 7\r\nModule `es7`.\r\n* `Array#includes` [proposal](https://github.com/domenic/Array.prototype.includes)\r\n* `String#at` [proposal](https://github.com/mathiasbynens/String.prototype.at)\r\n* `Object.values`, `Object.entries` [tc39 discuss](https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-04/apr-9.md#51-objectentries-objectvalues)\r\n* `RegExp.escape` [proposal](https://gist.github.com/kangax/9698100)\r\n\r\n```javascript\r\nArray\r\n  #includes(var, from?) -> bool\r\nString\r\n  #at(index) -> string\r\nObject\r\n  .values(object) -> array\r\n  .entries(object) -> array\r\nRegExp\r\n  .escape(str) -> str\r\n```\r\n[Examples](http://goo.gl/4HcpLK):\r\n```javascript\r\n[1, 2, 3].includes(2);        // => true\r\n[1, 2, 3].includes(4);        // => false\r\n[1, 2, 3].includes(2, 2);     // => false\r\n\r\n[NaN].indexOf(NaN);           // => -1\r\n[NaN].includes(NaN);          // => true\r\nArray(1).indexOf(undefined);  // => -1\r\nArray(1).includes(undefined); // => true\r\n\r\n'a𠮷b'.at(1);        // => '𠮷'\r\n'a𠮷b'.at(1).length; // => 2\r\n\r\nObject.values({a: 1, b: 2, c: 3});  // => [1, 2, 3]\r\nObject.entries({a: 1, b: 2, c: 3}); // => [['a', 1], ['b', 2], ['c', 3]]\r\n\r\nRegExp.escape('Hello -[]{}()*+?.,\\\\^$|'); // => 'Hello \\-\\[\\]\\{\\}\\(\\)\\*\\+\\?\\.\\,\\\\\\^\\$\\|'\r\n```\r\n### ECMAScript 7: Abstract References\r\nModule `es7_refs`. Symbols and methods for [abstract references](https://github.com/zenparsing/es-abstract-refs). At the moment, they are supported only by several translators, such as [6to5](https://github.com/6to5/6to5).\r\n```javascript\r\nSymbol\r\n  .referenceGet -> @@referenceGet\r\n  .referenceSet -> @@referenceSet\r\n  .referenceDelete -> @@referenceDelete\r\nFunction\r\n  #@@referenceGet() -> @\r\nMap\r\n  #@@referenceGet ==== #get\r\n  #@@referenceSet ==== #set\r\n  #@@referenceDelete ==== #delete\r\nWeakMap\r\n  #@@referenceGet ==== #get\r\n  #@@referenceSet ==== #set\r\n  #@@referenceDelete ==== #delete\r\n```\r\nPrivate properties [example](http://goo.gl/sO0KHa) with [`WeakMaps`](#weakmap), class and basic abstract refs syntax:\r\n```javascript\r\nvar Person = (NAME => class {\r\n  constructor(name){\r\n    this::NAME = name;\r\n  }\r\n  getName(){\r\n    return this::NAME;\r\n  }\r\n})(new WeakMap);\r\n\r\nvar person = new Person('Vasya');\r\nconsole.log(person.getName());          // => 'Vasya'\r\nfor(var key in person)console.log(key); // => only 'getName'\r\n```\r\nThe same [example](http://goo.gl/3rVNTP) with the `private` keyword:\r\n```javascript\r\nclass Person {\r\n  private NAME\r\n  constructor(name){\r\n    this::NAME = name;\r\n  }\r\n  getName(){\r\n    return this::NAME;\r\n  }\r\n}\r\n\r\nvar person = new Person('Vasya');\r\nconsole.log(person.getName());          // => 'Vasya'\r\nfor(var key in person)console.log(key); // => only 'getName'\r\n```\r\nVirtual methods [example](http://goo.gl/GJmEfl):\r\n```javascript\r\nvar {toString} = {};\r\n[]::toString() // => '[object Array]'\r\n\r\nfunction sum(){\r\n  var {reduce} = [];\r\n  return arguments::reduce((a, b)=> a + b);\r\n}\r\nsum(1, 2, 3, 4, 5) // => 15\r\n```\r\nVirtual `size` property for dictionaries [example](http://goo.gl/uAg4vC):\r\n```javascript\r\nlet size = {\r\n  [Symbol.referenceGet](it){\r\n    return Object.keys(it).length;\r\n  },\r\n  [Symbol.referenceSet](it, length){\r\n    for(let key of Object.keys(it).slice(length))delete it[key];\r\n  }\r\n}\r\n\r\n{q: 1, w: 2, e: 3}::size // => 3\r\nvar dict = {q: 1, w: 2, e: 3};\r\ndict::size = 2;\r\ndict // => {q: 1, w: 2};\r\n```\r\nMethods from [Dict module](#dict) override `@@referenceGet` method, [example](http://goo.gl/H4S6d4):\r\n```javascript\r\nvar {filter, map} = Dict;\r\nvar dict = {q: 1, w: 2, e: 3}\r\n  ::filter((v, k) => k != 'w')\r\n  ::map(v => v * v); // => {\"q\":1,\"e\":9}\r\n```\r\n### Mozilla JavaScript: Array generics\r\nModule `array_statics`.\r\n```javascript\r\nArray\r\n  .{...ArrayPrototype methods}\r\n```\r\n\r\n```javascript\r\nArray.slice(arguments, 1);\r\n\r\nArray.join('abcdef', '+'); // => 'a+b+c+d+e+f'\r\n\r\nvar form = document.getElementsByClassName('form__input');\r\nArray.reduce(form, function(memo, it){\r\n  memo[it.name] = it.value;\r\n  return memo;\r\n}, {}); // => {name: 'Vasya', age: '42', sex: 'yes, please'}\r\n```\r\n### setTimeout / setInterval\r\nModule `timers`. Additional arguments fix for IE9-.\r\n```javascript\r\nsetTimeout(fn(...args), time, ...args) -> id\r\nsetInterval(fn(...args), time, ...args) -> id\r\n```\r\n```javascript\r\n// Before:\r\nsetTimeout(log.bind(null, 42), 1000);\r\n// After:\r\nsetTimeout(log, 1000, 42);\r\n```\r\n### setImmediate\r\nModule `immediate`. [setImmediate](https://developer.mozilla.org/en-US/docs/Web/API/Window.setImmediate) polyfill.\r\n```javascript\r\nsetImmediate(fn(...args), ...args) -> id\r\nclearImmediate(id) -> void\r\n```\r\n[Example](http://goo.gl/6nXGrx):\r\n```javascript\r\nsetImmediate(function(arg1, arg2){\r\n  console.log(arg1, arg2); // => Message will be displayed with minimum delay\r\n}, 'Message will be displayed', 'with minimum delay');\r\n\r\nclearImmediate(setImmediate(function(){\r\n  console.log('Message will not be displayed');\r\n}));\r\n```\r\n### Console\r\nModule `console`. Console cap for old browsers and some additional functionality.\r\n```javascript\r\nconsole\r\n  .{...console API}\r\n  .enable() -> void\r\n  .disable() -> void\r\n```\r\n```javascript\r\n// Before:\r\nif(window.console && console.log)console.log(42);\r\n// After:\r\nconsole.log(42);\r\n\r\n// Before:\r\nsetTimeout(console.log.bind(console, 42), 1000);\r\n[1, 2, 3].forEach(console.log, console);\r\n// After:\r\nsetTimeout(console.log, 1000, 42);\r\n[1, 2, 3].forEach(console.log);\r\n\r\nconsole.disable();\r\nconsole.warn('Console is disabled, you will not see this message.');\r\nconsole.enable();\r\nconsole.warn('Console is enabled again.');\r\n```\r\n### Object\r\nModule `object`.\r\n```javascript\r\nObject\r\n  .isObject(var) -> bool\r\n  .classof(var) -> string \r\n  .define(target, mixin) -> target\r\n  .make(proto | null, mixin?) -> object\r\n```\r\nObject classify [examples](http://goo.gl/YZQmGo):\r\n```javascript\r\nObject.isObject({});    // => true\r\nObject.isObject(isNaN); // => true\r\nObject.isObject(null);  // => false\r\n\r\nvar classof = Object.classof;\r\n\r\nclassof(null);                 // => 'Null'\r\nclassof(undefined);            // => 'Undefined'\r\nclassof(1);                    // => 'Number'\r\nclassof(true);                 // => 'Boolean'\r\nclassof('string');             // => 'String'\r\nclassof(Symbol());             // => 'Symbol'\r\n\r\nclassof(new Number(1));        // => 'Number'\r\nclassof(new Boolean(true));    // => 'Boolean'\r\nclassof(new String('string')); // => 'String'\r\n\r\nvar fn   = function(){}\r\n  , list = (function(){return arguments})(1, 2, 3);\r\n\r\nclassof({});                   // => 'Object'\r\nclassof(fn);                   // => 'Function'\r\nclassof([]);                   // => 'Array'\r\nclassof(list);                 // => 'Arguments'\r\nclassof(/./);                  // => 'RegExp'\r\nclassof(new TypeError);        // => 'Error'\r\n\r\nclassof(new Set);              // => 'Set'\r\nclassof(new Map);              // => 'Map'\r\nclassof(new WeakSet);          // => 'WeakSet'\r\nclassof(new WeakMap);          // => 'WeakMap'\r\nclassof(new Promise(fn));      // => 'Promise'\r\n\r\nclassof([].values());          // => 'Array Iterator'\r\nclassof(new Set().values());   // => 'Set Iterator'\r\nclassof(new Map().values());   // => 'Map Iterator'\r\n\r\nclassof(Math);                 // => 'Math'\r\nclassof(JSON);                 // => 'JSON'\r\n\r\nfunction Example(){}\r\nExample.prototype[Symbol.toStringTag] = 'Example';\r\n\r\nclassof(new Example);          // => 'Example'\r\n```\r\n`Object.define` and `Object.make` [examples](http://goo.gl/rtpD5Z):\r\n```javascript\r\n// Before:\r\nObject.defineProperty(target, 'c', {\r\n  enumerable: true,\r\n  configurable: true,\r\n  get: function(){\r\n    return this.a + this.b;\r\n  }\r\n});\r\n\r\n// After:\r\nObject.define(target, {\r\n  get c(){\r\n    return this.a + this.b;\r\n  }\r\n});\r\n\r\n// Shallow object cloning with prototype and descriptors:\r\nvar copy = Object.make(Object.getPrototypeOf(src), src);\r\n\r\n// Simple inheritance:\r\nfunction Vector2D(x, y){\r\n  this.x = x;\r\n  this.y = y;\r\n}\r\nObject.define(Vector2D.prototype, {\r\n  get xy(){\r\n    return Math.hypot(this.x, this.y);\r\n  }\r\n});\r\nfunction Vector3D(x, y, z){\r\n  Vector2D.apply(this, arguments);\r\n  this.z = z;\r\n}\r\nVector3D.prototype = Object.make(Vector2D.prototype, {\r\n  constructor: Vector3D,\r\n  get xyz(){\r\n    return Math.hypot(this.x, this.y, this.z);\r\n  }\r\n});\r\n\r\nvar vector = new Vector3D(9, 12, 20);\r\nconsole.log(vector.xy);  // => 15\r\nconsole.log(vector.xyz); // => 25\r\nvector.y++;\r\nconsole.log(vector.xy);  // => 15.811388300841896\r\nconsole.log(vector.xyz); // => 25.495097567963924\r\n```\r\n### Dict\r\nModule `dict`. Based on [TC39 discuss](https://github.com/rwaldron/tc39-notes/blob/master/es6/2012-11/nov-29.md#collection-apis-review) / [strawman](http://wiki.ecmascript.org/doku.php?id=harmony:modules_standard#dictionaries).\r\n```javascript\r\n[new] Dict(itarable (entries) | object ?) -> dict\r\n  .isDict(var) -> bool\r\n  .values(object) -> iterator\r\n  .keys(object) -> iterator\r\n  .entries(object) -> iterator (entries)\r\n  .has(object, key) -> bool\r\n  .get(object, key) -> val\r\n  .set(object, key, value) -> object\r\n  .forEach(object, fn(val, key, @), that) -> void\r\n  .map(object, fn(val, key, @), that) -> new @\r\n  .mapPairs(object, fn(val, key, @), that) -> new @\r\n  .filter(object, fn(val, key, @), that) -> new @\r\n  .some(object, fn(val, key, @), that) -> bool\r\n  .every(object, fn(val, key, @), that) -> bool\r\n  .find(object, fn(val, key, @), that) -> val\r\n  .findKey(object, fn(val, key, @), that) -> key\r\n  .keyOf(object, var) -> key\r\n  .includes(object, var) -> bool\r\n  .reduce(object, fn(memo, val, key, @), memo?) -> var\r\n  .turn(object, fn(memo, val, key, @), memo = new @) -> memo\r\n```\r\n`Dict` create object without prototype from iterable or simple object. [Example](http://goo.gl/pnp8Vr):\r\n```javascript\r\nvar map = new Map([['a', 1], ['b', 2], ['c', 3]]);\r\n\r\nDict();                    // => {__proto__: null}\r\nDict({a: 1, b: 2, c: 3});  // => {__proto__: null, a: 1, b: 2, c: 3}\r\nDict(map);                 // => {__proto__: null, a: 1, b: 2, c: 3}\r\nDict([1, 2, 3].entries()); // => {__proto__: null, 0: 1, 1: 2, 2: 3}\r\n\r\nvar dict = Dict({a: 42});\r\ndict instanceof Object;   // => false\r\ndict.a;                   // => 42\r\ndict.toString;            // => undefined\r\n'a' in dict;              // => true\r\n'hasOwnProperty' in dict; // => false\r\n\r\nDict.isDict({});     // => false\r\nDict.isDict(Dict()); // => true\r\n```\r\n`Dict.keys`, `Dict.values` and `Dict.entries` return iterators for objects, [examples](http://goo.gl/JRkgM8):\r\n```javascript\r\nvar dict = {a: 1, b: 2, c: 3};\r\n\r\nfor(var key of Dict.keys(dict))console.log(key); // => 'a', 'b', 'c'\r\n\r\nfor(var [key, val] of Dict.entries(dict)){\r\n  console.log(key); // => 'a', 'b', 'c'\r\n  console.log(val); // => 1, 2, 3\r\n}\r\n\r\n$for(Dict.values(dict)).of(console.log); // => 1, 2, 3\r\n\r\nnew Map(Dict.entries(dict)); // => Map {a: 1, b: 2, c: 3}\r\n\r\nnew Map((for([k, v] of Dict.entries(dict))if(v % 2)[k + k, v * v])); // =>  Map {aa: 1, cc: 9}\r\n```\r\nOther methods of `Dict` module are static equialents of `Array.prototype` methods for dictionaries, [examples](http://goo.gl/yARYXR):\r\n```javascript\r\nvar dict = {a: 1, b: 2, c: 3};\r\n\r\nDict.forEach(dict, console.log, console);\r\n// => 1, 'a', {a: 1, b: 2, c: 3}\r\n// => 2, 'b', {a: 1, b: 2, c: 3}\r\n// => 3, 'c', {a: 1, b: 2, c: 3}\r\n\r\nDict.map(dict, function(it){\r\n  return it * it;\r\n}); // => {a: 1, b: 4, c: 9}\r\n\r\nDict.mapPairs(dict, function(val, key){\r\n  if(key != 'b')return [key + key, val * val];\r\n}); // => {aa: 1, cc: 9}\r\n\r\nDict.filter(dict, function(it){\r\n  return it % 2;\r\n}); // => {a: 1, c: 3}\r\n\r\nDict.some(dict, function(it){\r\n  return it === 2;\r\n}); // => true\r\n\r\nDict.every(dict, function(it){\r\n  return it === 2;\r\n}); // => false\r\n\r\nDict.find(dict, function(it){\r\n  return it > 2;\r\n}); // => 3\r\nDict.find(dict, function(it){\r\n  return it > 4;\r\n}); // => undefined\r\n\r\nDict.findKey(dict, function(it){\r\n  return it > 2;\r\n}); // => 'c'\r\nDict.findKey(dict, function(it){\r\n  return it > 4;\r\n}); // => undefined\r\n\r\nDict.keyOf(dict, 2);    // => 'b'\r\nDict.keyOf(dict, 4);    // => undefined\r\n\r\nDict.includes(dict, 2); // => true\r\nDict.includes(dict, 4); // => false\r\n\r\nDict.reduce(dict, function(memo, it){\r\n  return memo + it;\r\n});     // => 6\r\nDict.reduce(dict, function(memo, it){\r\n  return memo + it;\r\n}, ''); // => '123'\r\n\r\nDict.turn(dict, function(memo, it, key){\r\n  memo[key + key] = it;\r\n});     // => {aa: 1, bb: 2, cc: 3}\r\nDict.turn(dict, function(memo, it, key){\r\n  it % 2 && memo.push(key + it);\r\n}, []); // => ['a1', 'c3']\r\n```\r\n### Partial application\r\nModule `binding`.\r\n```javascript\r\nFunction\r\n  #part(...args | _) -> fn(...args)\r\n  #by(object | _, ...args | _) -> boundFn(...args)\r\n  #only(num, that /* = @ */) -> (fn | boundFn)(...args)\r\nObject\r\n  #[_](key) -> boundFn\r\n```\r\n`Function#part` partial apply function without `this` binding. Uses global variable `_` (`core._` for builds without extension of native objects) as placeholder. [Examples](http://goo.gl/p9ZJ8K):\r\n```javascript\r\nvar fn1 = console.log.part(1, 2);\r\nfn1(3, 4);    // => 1, 2, 3, 4\r\n\r\nvar fn2 = console.log.part(_, 2, _, 4);\r\nfn2(1, 3);    // => 1, 2, 3, 4\r\n\r\nvar fn3 = console.log.part(1, _, _, 4);\r\nfn3(2, 3);    // => 1, 2, 3, 4\r\n\r\nfn2(1, 3, 5); // => 1, 2, 3, 4, 5\r\nfn2(1);       // => 1, 2, undefined, 4\r\n```\r\nMethod `Function#by` is analogue of `Function#bind` with the ability to use placeholder:\r\n```javascript\r\nvar fn = console.log.by(console, _, 2, _, 4);\r\nfn(1, 3, 5); // => 1, 2, 3, 4, 5\r\n```\r\nMethod `Object#[_]` extracts bound method from object, [examples](http://goo.gl/dQsSTi):\r\n```javascript\r\n['foobar', 'foobaz', 'barbaz'].filter(/bar/[_]('test')); // => ['foobar', 'barbaz']\r\n\r\nvar has = {}.hasOwnProperty[_]('call');\r\n\r\nlog(has({key: 42}, 'foo')); // => false\r\nlog(has({key: 42}, 'key')); // => true\r\n\r\nvar array = []\r\n  , push  = array[_]('push');\r\npush(1);\r\npush(2, 3);\r\nlog(array); // => [1, 2, 3];\r\n```\r\nMethod `Function#only` limits number of arguments. [Example](http://goo.gl/ROgBsL):\r\n```javascript\r\n[1, 2, 3].forEach(log.only(1)); // => 1, 2, 3\r\n```\r\n### Date formatting\r\nModule `date`. Much more simple and compact (~60 lines with `en` & `ru` locales) than [Intl](https://github.com/andyearnshaw/Intl.js) or [Moment.js](http://momentjs.com/). Use them if you need extended work with `Date`.\r\n```javascript\r\nDate\r\n  #format(str, key?) -> str\r\n  #formatUTC(str, key?) -> str\r\ncore\r\n  .addLocale(key, object) -> core\r\n  .locale(key?) -> key\r\n```\r\nToken | Unit | Sample\r\n------|----- | ------\r\ns  | Seconds           | 0-59\r\nss | Seconds, 2 digits | 00-59\r\nm  | Minutes           | 0-59\r\nmm | Minutes, 2 digits | 00-59\r\nh  | Hours             | 0-23\r\nhh | Hours, 2 digits   | 00-23\r\nD  | Date              | 1-31\r\nDD | Date, 2 digits    | 01-31\r\nW  | Weekday, string   | Вторник\r\nN  | Month             | 1-12\r\nNN | Month, 2 digits   | 01-12\r\nM  | Month, string     | Ноябрь\r\nMM | Of month, string  | Ноября\r\nY  | Year, full        | 2014\r\nYY | Year, 2 digits    | 14\r\n[Examples](http://goo.gl/nkCJ15):\r\n```javascript\r\nnew Date().format('W, MM D, YY, h:mm:ss');        // => 'Friday, November 28, 14, 18:47:05'\r\nnew Date().formatUTC('W, MM D, YY, h:mm:ss');     // => 'Friday, November 28, 14, 12:47:05'\r\n\r\nnew Date().format('W, D MM Y г., h:mm:ss', 'ru'); // => 'Пятница, 28 Ноября 2014 г., 18:07:25'\r\n\r\ncore.locale('ru');\r\nnew Date().format('W, D MM Y г., h:mm:ss');       // => 'Пятница, 28 Ноября 2014 г., 18:07:25'\r\n\r\nnew Date().format('DD.NN.YY');         // => '28.11.14'\r\nnew Date().format('hh:mm:ss');         // => '18:47:05'\r\nnew Date().format('DD.NN.Y hh:mm:ss'); // => '28.11.2014 18:47:05'\r\nnew Date().format('W, D MM Y года');   // => 'Пятница, 28 Ноября 2014 года'\r\nnew Date().format('D MM, h:mm');       // => '28 Ноября, 16:47'\r\nnew Date().format('M Y');              // => 'Ноябрь 2014'\r\n\r\n(typeof core != 'undefined' ? core : require('core-js/library')).addLocale('ru', {\r\n  weekdays: 'Воскресенье,Понедельник,Вторник,Среда,Четверг,Пятница,Суббота',\r\n  months: 'Январ:я|ь,Феврал:я|ь,Март:а|,Апрел:я|ь,Ма:я|й,Июн:я|ь,Июл:я|ь,Август:а|,Сентябр:я|ь,Октябр:я|ь,Ноябр:я|ь,Декабр:я|ь'\r\n});\r\n```\r\n### Array\r\nModule `array`.\r\n```javascript\r\nArray\r\n  #turn(fn(memo, val, index, @), memo = []) -> memo\r\n```\r\nMethod `Array#turn` reduce array to object, [example](http://goo.gl/zZbvq7):\r\n```javascript\r\n[1, 2, 3, 4, 5].turn(function(memo, it){\r\n  memo['key' + it] = !!(it % 2);\r\n}, {}); // => {key1: true, key2: false, key3: true, key4: false, key5: true}\r\n\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9].turn(function(memo, it){\r\n  it % 2 && memo.push(it * it);\r\n  if(memo.length == 3)return false;\r\n}); // => [1, 9, 25]\r\n```\r\n### Number\r\nModule `number`.\r\n```javascript\r\nNumber\r\n  #@@iterator() -> iterator\r\n  #random(lim = 0) -> num\r\n  #{...Math} \r\n```\r\nNumber Iterator [examples](http://goo.gl/mkReUE):\r\n```javascript\r\nfor(var i of 3)console.log(i); // => 0, 1, 2\r\n\r\n$for(3).of(console.log); // => 0, 1, 2\r\n\r\nArray.from(10, Math.random); // => [0.9817775336559862, 0.02720663254149258, ...]\r\n\r\nArray.from(10); // => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\nArray.from(10, function(it){\r\n  return this + it * it;\r\n}, .42); // => [0.42, 1.42, 4.42, 9.42, 16.42, 25.42, 36.42, 49.42, 64.42, 81.42]\r\n\r\n// Comprehensions:\r\n[for(i of 10)if(i % 2)i * i]; // => [1, 9, 25, 49, 81]\r\n\r\nDict((for(i of 3)['key' + i, !(i % 2)])); // => {key0: true, key1: false, key2: true}\r\n\r\n$for(10).filter(function(i){\r\n  return i % 2;\r\n}).array(function(i){\r\n  return i * i;\r\n});  // => [1, 9, 25, 49, 81]\r\n\r\nDict($for(3).map(function(i){\r\n  return ['key' + i, !(i % 2)];\r\n})); // => {key0: true, key1: false, key2: true}\r\n```\r\n`Math` methods in `Number.prototype` [examples](http://goo.gl/06bs1k):\r\n```javascript\r\n3..pow(3);           // => 27\r\n(-729).abs().sqrt(); // => 27\r\n\r\n10..random(20);         // => Random number (10, 20), for example, 16.818793776910752\r\n10..random(20).floor(); // => Random integer [10, 19], for example, 16\r\n\r\nvar array = [1, 2, 3, 4, 5];\r\narray[array.length.random().floor()]; // => Random element, for example, 4\r\n```\r\n### Escaping characters\r\nModule `string`.\r\n```javascript\r\nString\r\n  #escapeHTML() -> str\r\n  #unescapeHTML() -> str\r\n```\r\n[Examples](http://goo.gl/6bOvsQ):\r\n```javascript\r\n'<script>doSomething();</script>'.escapeHTML(); // => '&lt;script&gt;doSomething();&lt;/script&gt;'\r\n'&lt;script&gt;doSomething();&lt;/script&gt;'.unescapeHTML(); // => '<script>doSomething();</script>'\r\n```\r\n\r\n## Install\r\n```\r\n// Node.js:\r\nnpm i core-js\r\n// Bower:\r\nbower install core.js\r\n```\r\nBrowser builds: [default](https://github.com/zloirock/core-js/raw/master/client/core.min.js), [without extension of native objects](https://github.com/zloirock/core-js/raw/master/client/core.min.js), [shim only](https://github.com/zloirock/core-js/raw/master/client/shim.min.js).\r\n\r\nCustom builds:\r\n```\r\nnpm i -g grunt-cli\r\nnpm i core-js\r\ncd node_modules/core-js && npm i\r\ngrunt build:date,console,library --path=custom uglify\r\n```\r\nWhere `date` and `console` are module names, `library` is flag for not extension of native objects and `custom` is target file name.\r\n\r\nRequire in Node.js:\r\n```javascript\r\n// Dafault\r\nrequire('core-js');\r\n// Without extension of native objects\r\nvar core = require('core-js/library');\r\n// Shim only\r\nrequire('core-js/shim');\r\n```\r\n## Changelog\r\n**0.4.5** - *2015.01.16* - Some fixes\r\n\r\n**0.4.4** - *2015.01.11* - Enabled CSP support\r\n\r\n**0.4.3** - *2015.01.10* - Added `Function` instances `name` property for IE9+\r\n\r\n**0.4.2** - *2015.01.10*\r\n  * `Object` static methods accept primitives\r\n  * `RegExp` constructor can alter flags (IE9+)\r\n  * added `Array.prototype[Symbol.unscopables]`\r\n\r\n**0.4.1** - *2015.01.05* - Some fixes\r\n\r\n**0.4.0** - *2015.01.03*\r\n  * added [`es6_reflect`](#ecmascript-6-reflect) module:\r\n    * added `Reflect.apply`\r\n    * added `Reflect.construct`\r\n    * added `Reflect.defineProperty`\r\n    * added `Reflect.deleteProperty`\r\n    * added `Reflect.enumerate`\r\n    * added `Reflect.get`\r\n    * added `Reflect.getOwnPropertyDescriptor`\r\n    * added `Reflect.getPrototypeOf`\r\n    * added `Reflect.has`\r\n    * added `Reflect.isExtensible`\r\n    * added `Reflect.preventExtensions`\r\n    * added `Reflect.set`\r\n    * added `Reflect.setPrototypeOf`\r\n  * core.js methods now can use external `Symbol.iterator` polyfill\r\n  * some fixes\r\n\r\n**0.3.3** - *2014.12.28*\r\n  * [console cap](#console) excluded from node.js default builds\r\n\r\n**0.3.2** - *2014.12.25*\r\n  * added cap for [ES5](#ecmascript-5) freeze-family methods\r\n  * fixed `console` bug\r\n\r\n**0.3.1** - *2014.12.23* - Some fixes\r\n\r\n**0.3.0** - *2014.12.23* - Optimize [`Map` & `Set`](#ecmascript-6-collections)\r\n  * use entries chain on hash table\r\n  * fast & correct iteration\r\n  * iterators moved to [`es6`](#ecmascript-6) and [`es6_collections`](#ecmascript-6-collections) modules\r\n\r\n**0.2.5** - *2014.12.20*\r\n  * `console` no longer shortcut for `console.log` (compatibility problems)\r\n  * some fixes\r\n\r\n**0.2.4** - *2014.12.17* - Better compliance of ES6\r\n  * some fixes\r\n  * added [`Math.fround`](#ecmascript-6-number--math) (IE10+)\r\n\r\n**0.2.3** - *2014.12.15* - [Symbols](#ecmascript-6-symbols):\r\n  * added option to disable addition setter to `Object.prototype` for Symbol polyfill:\r\n    * added `Symbol.useSimple`\r\n    * added `Symbol.useSetter`\r\n  * added cap for well-known Symbols:\r\n    * added `Symbol.hasInstance`\r\n    * added `Symbol.isConcatSpreadable`\r\n    * added `Symbol.match`\r\n    * added `Symbol.replace`\r\n    * added `Symbol.search`\r\n    * added `Symbol.species`\r\n    * added `Symbol.split`\r\n    * added `Symbol.toPrimitive`\r\n    * added `Symbol.unscopables`\r\n\r\n**0.2.2** - *2014.12.13* - ES6:\r\n  * added [`RegExp#flags`](#ecmascript-6-string--regexp) ([December 2014 Draft Rev 29](http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#december_6_2014_draft_rev_29))\r\n  * added [`String.raw`](#ecmascript-6-string--regexp)\r\n\r\n**0.2.1** - *2014.12.12* - Repair converting -0 to +0 in [native collections](#ecmascript-6-collections)\r\n\r\n**0.2.0** - *2014.12.06*\r\n  * added [`es7`](#ecmascript-7), [`es7_refs`](#ecmascript-7-abstract-references) modules\r\n  * added [`String#at`](#ecmascript-7)\r\n  * added real [String Iterator](#ecmascript-6-iterators), older versions used Array Iterator\r\n  * added [abstract references](#ecmascript-7-abstract-references) support:\r\n    * added `Symbol.referenceGet`\r\n    * added `Symbol.referenceSet`\r\n    * added `Symbol.referenceDelete`\r\n    * added `Function#@@referenceGet`\r\n    * added `Map#@@referenceGet`\r\n    * added `Map#@@referenceSet`\r\n    * added `Map#@@referenceDelete`\r\n    * added `WeakMap#@@referenceGet`\r\n    * added `WeakMap#@@referenceSet`\r\n    * added `WeakMap#@@referenceDelete`\r\n    * added `Dict.{...methods}[@@referenceGet]`\r\n  * removed deprecated `.contains` methods\r\n  * some fixes\r\n\r\n**0.1.5** - *2014.12.01* - ES6:\r\n  * added [`Array#copyWithin`](#ecmascript-6-array)\r\n  * added [`String#codePointAt`](#ecmascript-6-string--regexp)\r\n  * added [`String.fromCodePoint`](#ecmascript-6-string--regexp)\r\n\r\n**0.1.4** - *2014.11.27*\r\n  * added [`Dict.mapPairs`](#dict)\r\n\r\n**0.1.3** - *2014.11.20* - [TC39 November meeting](https://github.com/rwaldron/tc39-notes/tree/master/es6/2014-11):\r\n  * [`.contains` -> `.includes`](https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-11/nov-18.md#51--44-arrayprototypecontains-and-stringprototypecontains)\r\n    * `String#contains` -> [`String#includes`](#ecmascript-6-string--regexp)\r\n    * `Array#contains` -> [`Array#includes`](#ecmascript-7)\r\n    * `Dict.contains` -> [`Dict.includes`](#dict)\r\n  * [removed `WeakMap#clear`](https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-11/nov-19.md#412-should-weakmapweakset-have-a-clear-method-markm)\r\n  * [removed `WeakSet#clear`](https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-11/nov-19.md#412-should-weakmapweakset-have-a-clear-method-markm)\r\n\r\n**0.1.2** - *2014.11.19* - Map & Set bug fix\r\n\r\n**0.1.1** - *2014.11.18* - Public release",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/zloirock/core-js/issues"
  },
  "homepage": "https://github.com/zloirock/core-js",
  "_id": "core-js@0.4.5",
  "dist": {
    "shasum": "1ad9ca7b6bfa87a49632452d43187b545f1715ad"
  },
  "_from": "core-js@0.4.5",
  "_resolved": "https://registry.npmjs.org/core-js/-/core-js-0.4.5.tgz"
}
